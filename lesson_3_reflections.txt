Password caching
https://help.github.com/articles/caching-your-github-password-in-git/

Enter this to find out if its installed: (it is)
git credential-osxkeychain

Enter this to tell git to use the osx keychain:
git config --global credential.helper osxkeychain

#cd to the reflections (example) repo dir, and enter:
git remote
# returns nothing because nothing exists.
#now enter the below to add the origin repo.
git remote add origin https://github.com/shadmansmusings/reflections.git
# now "git remote" will return - origin.

stevenhadfield (master *) reflections $ git remote -v
origin	https://github.com/shadmansmusings/reflections.git (fetch)
origin	https://github.com/shadmansmusings/reflections.git (push)

stevenhadfield (master *) reflections $ git push origin master
Username for 'https://github.com': shadmansmusings
Password for 'https://shadmansmusings@github.com':
Counting objects: 6, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (6/6), done.
Writing objects: 100% (6/6), 1.93 KiB | 0 bytes/s, done.
Total 6 (delta 2), reused 0 (delta 0)
To https://github.com/shadmansmusings/reflections.git
 * [new branch]      master -> master

SO - this requested my username and PW and pushed the repo up to github.

stevenhadfield (master *) reflections $ ls
lesson_1_reflections.txt lesson_2_reflections.txt lesson_3_reflections.txt
stevenhadfield (master *) reflections $ rm lesson_3_reflections.txt
stevenhadfield (master *) reflections $ git pull origin master
From https://github.com/shadmansmusings/reflections
 * branch            master     -> FETCH_HEAD
Updating d569663..dba22cb
Fast-forward
 lesson_3_reflections.txt | 34 ++++++++++++++++++++++++++++++++++
 1 file changed, 34 insertions(+)
 create mode 100644 lesson_3_reflections.txt

SO - lesson_3_reflections.txt pulled down
NOTE - I had created the file, but pull failed because the file existed and git
didn't want to overwrite it. I deleted the file, redid the pull - and all was
good.

So the sequence is:
#changes, save.
# to see what changed:
git status

# to stage the changes:
git add <fname> [<fname>, etc]

# verify they are staged:
git status

# commit with message:
git commit -m "some message here"

# push changes to github:
git push origin master


When would you want to use a remote repository rather than keeping all your work
local?

When you want to backup your work so as not to lose anything. Also, once you
might be done with a working session / day / whatever. You never want to forget
where you are, or take the chance of losing or overwriting changes.


Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

Some sort of auto pull could possibly overwrite local changes. Manually pulling
lets you control the changes in your local repo.


Add a recipe and put to the master branch.
$ git add soup-recipe.txt
$ git commit -m "adding a soup recipe"
$ git push origin master


Describe the differences between forks, clones, and branches. When would you use
one instead of another?

1. forking gives you a project as it exists from the place you got it from. That
   project doesn't change, only your fork changes.
2. cloning give you a local which can be pushed back into, so you can update the
   master repo on line (or whatever its name is).
3. branch is a copy of another branch, which could be later merged into the main
   branch.


Add change to local and github. then merge the two changes.

$ git fetch origin
## updates local with remote changes.
$ git log origin/master
$ git diff origin/master master
$ git status
## now merge:
$ git merge master origin/master

## this is same as git fetch and git merge:
$ git pull origin master

## now push it all up to github:
$ git push origin master


What is the benefit of having a copy of the last known state of the remote stored
locally?

it allows me to merge in local changes into it and push them to the remote.


## Create a different-oil branch, change hte oil and push the branch.

$ git branch different-oil
$ git checkout different-oil

## make change - add and commit here.

$ git push origin different-oil

## in github - change the base to make a pull request


How would you collaborate without using Git or GitHub? What would be easier, and
what would be harder?

CVS, SVN - both are viable options. There are some advantages to Git, but also
some disadvantages. I could easily see users not knowing where they were, too many
clones, merging nightmares. But I like the emphasis on more targeted commits. Nice
for bugfixes, and enhancements. Might still be too early for me to tell.
